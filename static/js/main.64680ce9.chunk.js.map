{"version":3,"sources":["helpers/urls.js","helpers/utils.js","action/posts.js","action/actionTypes.js","components/PostsList.js","action/auth.js","action/search.js","components/NavBar.js","components/Home.js","components/Page404.js","components/Login.js","components/Signup.js","components/Settings.js","action/profile.js","action/friends.js","components/UserProfile.js","components/FriendsList.js","components/FriendsListItem.js","components/CreatePost.js","components/Post.js","components/Comment.js","components/Chat.js","components/App.js","reducer/auth.js","reducer/profile.js","reducer/friends.js","reducer/search.js","reducer/index.js","reducer/posts.js","index.js","store/index.js"],"names":["API_ROOT","APIUrls","page","limit","userId","id","likeType","searchText","getFormBody","params","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","join","getAuthTokenFromLocalStorage","localStorage","getItem","fetchPosts","dispatch","url","fetch","then","response","json","data","console","log","type","posts","createPost","content","method","headers","Authorization","body","success","post","createComment","postId","post_id","comment","addComment","addLikeToStore","addPostLike","commentId","addCommentLike","PostsList","this","props","className","map","key","_id","Component","signup","email","password","confirmPassword","name","confirm_password","setItem","token","user","error","message","searchResultsSuccess","users","Navbar","logOut","removeItem","handleSearch","e","target","value","setState","text","searchUsers","state","auth","results","to","src","alt","placeholder","onChange","length","isLoggedin","onClick","React","connect","search","Home","friends","Page404","Login","handleEmailChange","handlePasswordChange","handleFormSubmit","preventDefault","login","inProgress","from","location","pathname","required","disabled","Signup","handleInputChange","field","onFormSubmit","Settings","handleChange","fieldName","val","handleSave","editUser","editMode","fetchUserProfile","fetchUserFriends","UserProfile","checkIfUserIsAFriend","match","friend","to_user","indexOf","handleAddFriendClick","a","options","successMessage","friendship","handleRemoveFriendClick","prevProps","prevParams","currentParams","profile","isUserAFriend","FriendsList","FriendsListItem","CreatePost","handleOnClick","User","Post","handleAddComment","handleOnCommentChange","handlePostLike","hadleShowComment","showComments","handleSetDate","postDate","today","Date","currMonth","getMonth","currDate","getDate","month","slice","date","hour","minute","toString","isPostLikedByUser","likes","includes","createdAt","comments","onKeyPress","Comment","handleCommentLike","commentDate","isCommentLikedByUser","Chat","setUpConnection","socketConnection","socket","self","on","emit","user_email","userEmail","chatroom","messages","messageObject","typedMessage","handleSubmit","handlecatbox","chat","showChat","io","height","PrivateRoute","privateRoutProps","path","component","render","App","jwtDecode","authenticateUser","NavBar","exact","LogIn","SignUp","initialAuthState","initialProfileState","defaultProfileState","initialSearchState","combineReducers","action","newPosts","updatedPosts","updatedPost","updateComment","concat","newArr","filter","store","createStore","reducer","applyMiddleware","thunk","logger","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.64680ce9.chunk.js","sourcesContent":["const API_ROOT = 'http://codeial.com:8000/api/v2';\r\n\r\nexport const APIUrls = {\r\n  login: () => `${API_ROOT}/users/login`,\r\n  signup: () => `${API_ROOT}/users/signup`,\r\n  editProfile: () => `${API_ROOT}/users/edit`,\r\n  fetchPosts: (page, limit) => `${API_ROOT}/posts?page=${page}&limit=${limit}`,\r\n  userProfile: (userId) => `${API_ROOT}/users/${userId}`,\r\n  userFriends: () => `${API_ROOT}/friendship/fetch_user_friends`,\r\n  addFriend: (userId) =>\r\n    `${API_ROOT}/friendship/create_friendship?user_id=${userId}`,\r\n  removeFriend: (userId) =>\r\n    `${API_ROOT}/friendship/remove_friendship?user_id=${userId}`,\r\n  createPost: () => `${API_ROOT}/posts/create`,\r\n  createComment: () => `${API_ROOT}/comments/`,\r\n  toggleLike: (id, likeType) =>\r\n    `${API_ROOT}/likes/toggle?likeable_id=${id}&likeable_type=${likeType}`,\r\n  userSearch: (searchText) => `${API_ROOT}/users/search?text=${searchText}`,\r\n};\r\n","//--- his helper function is userd of make body of request\r\n//-- like /username=abc&password=abc\r\n\r\nexport function getFormBody(params) {\r\n  let formBody = [];\r\n\r\n  for (let property in params) {\r\n    //--- encodeURIComponent is userd for convert data in url format eg: 'user name' => 'user%20name'\r\n    let encodedKey = encodeURIComponent(property);\r\n    let encodedValue = encodeURIComponent(params[property]);\r\n\r\n    formBody.push(encodedKey + '=' + encodedValue);\r\n  }\r\n\r\n  return formBody.join('&'); //-- user%20name=abc&password=abc\r\n}\r\n\r\nexport function getAuthTokenFromLocalStorage() {\r\n  return localStorage.getItem('token');\r\n}\r\n","import {\r\n  UPDATE_POSTS,\r\n  ADD_POST,\r\n  ADD_COMMENT,\r\n  UPDATE_POST_LIKE,\r\n  UPDATE_COMMENT_LIKE,\r\n} from './actionTypes';\r\nimport { APIUrls } from '../helpers/urls';\r\nimport { getAuthTokenFromLocalStorage, getFormBody } from '../helpers/utils';\r\n\r\n//---- fetching post using API\r\nexport function fetchPosts() {\r\n  return (dispatch) => {\r\n    const url = APIUrls.fetchPosts(1, 5);\r\n    fetch(url)\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        console.log('data:', data);\r\n        dispatch(updatePosts(data.data.posts));\r\n      });\r\n  };\r\n}\r\n\r\n//---- after fetch the post from API we have to call reducer to add post to store\r\nexport function updatePosts(posts) {\r\n  return {\r\n    type: UPDATE_POSTS,\r\n    posts,\r\n  };\r\n}\r\n\r\n//---- add post to the API\r\nexport function createPost(content) {\r\n  return (dispatch) => {\r\n    const url = APIUrls.createPost();\r\n\r\n    fetch(url, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n        Authorization: `Bearer ${getAuthTokenFromLocalStorage()}`,\r\n      },\r\n      body: getFormBody({ content }),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log('Create_post:Data', data);\r\n\r\n        if (data.success) {\r\n          dispatch(addPost(data.data.post));\r\n        }\r\n      });\r\n  };\r\n}\r\n\r\n//---- add Post when user create a post\r\nexport function addPost(post) {\r\n  return {\r\n    type: ADD_POST,\r\n    post,\r\n  };\r\n}\r\n\r\n//---- add comment to the post API\r\nexport function createComment(content, postId) {\r\n  return (dispatch) => {\r\n    const url = APIUrls.createComment();\r\n\r\n    fetch(url, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n        Authorization: `Bearer ${getAuthTokenFromLocalStorage()}`,\r\n      },\r\n      body: getFormBody({ content, post_id: postId }),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data.success) {\r\n          dispatch(addComment(data.data.comment, postId));\r\n        }\r\n      });\r\n  };\r\n}\r\n\r\n//----- call reducer to add comment to the store\r\nexport function addComment(comment, postId) {\r\n  return {\r\n    type: ADD_COMMENT,\r\n    comment,\r\n    postId,\r\n  };\r\n}\r\n\r\n//---- fectch API for toggle like on POST\r\nexport function addLikeToStore(id, likeType, userId, postId) {\r\n  return (dispatch) => {\r\n    const url = APIUrls.toggleLike(id, likeType);\r\n\r\n    fetch(url, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n        Authorization: `Bearer ${getAuthTokenFromLocalStorage()}`,\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log('LIKE DATA', data);\r\n\r\n        if (data.success) {\r\n          if (likeType === 'Post') {\r\n            dispatch(addPostLike(id, userId));\r\n          } else {\r\n            //console.log('call me');\r\n            dispatch(addCommentLike(id, userId, postId));\r\n          }\r\n        }\r\n      });\r\n  };\r\n}\r\n//---- Calling reducer to update post like status on store\r\nexport function addPostLike(postId, userId) {\r\n  return {\r\n    type: UPDATE_POST_LIKE,\r\n    postId,\r\n    userId,\r\n  };\r\n}\r\n//---- Calling reducer to update Comment like status on store\r\nexport function addCommentLike(commentId, userId, postId) {\r\n  return {\r\n    type: UPDATE_COMMENT_LIKE,\r\n    commentId,\r\n    userId,\r\n    postId,\r\n  };\r\n}\r\n","export const UPDATE_POSTS = 'UPDATE_POSTS';\r\n\r\n//login action types\r\nexport const LOGIN_START = 'LOGIN_START';\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_FAILED = 'LOGIN_FAILED';\r\n\r\nexport const AUTHENTICATE_USER = 'AUTHENTICATE_USER';\r\nexport const LOG_OUT = 'LOG_OUT';\r\n\r\n//signUp\r\nexport const SIGNUP_START = 'SIGNUP_START';\r\nexport const SIGNUP_SUCCESS = 'SIGNUP_SUCCESS';\r\nexport const SIGNUP_FAILED = 'SIGNUP_FAILED';\r\nexport const CLEAR_AUTH_STATE = 'CLEAR_AUTH_STATE';\r\n\r\n//user profile edit\r\nexport const EDIT_USER_SUCCESSFUL = 'EDIT_USER_SUCCESSFUL';\r\nexport const EDIT_USER_FAILED = 'EDIT_USER_FAILED';\r\n\r\n//differnt user profile\r\nexport const USER_PROFILE_SUCCESS = 'USER_PROFILE_SUCCESS';\r\nexport const USER_PROFILE_FAILURE = 'USER_PROFILE_FAILURE';\r\nexport const FETCH_USER_PROFILE = 'FETCH_USER_PROFILE';\r\n\r\n//friends\r\nexport const FETCH_FRIENDS_SUCCESS = 'FETCH_FRIENDS_SUCCESS';\r\nexport const ADD_FRIEND = 'ADD_FRIEND';\r\nexport const REMOVE_FRIEND = 'REMOVE_FRIEND';\r\n\r\n//Post & Comment\r\nexport const ADD_POST = 'ADD_POST';\r\nexport const ADD_COMMENT = 'ADD_COMMENT';\r\nexport const UPDATE_POST_LIKE = 'UPDATE_POST_LIKE';\r\nexport const UPDATE_COMMENT_LIKE = 'UPDATE_COMMENT_LIKE';\r\n\r\n//Search\r\nexport const FETCH_SEARCH_RESULTS_SUCCESS = 'FETCH_SEARCH_RESULTS_SUCCESS';\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CreatePost, Post } from './';\r\n\r\nclass PostsList extends Component {\r\n  render() {\r\n    const { posts } = this.props;\r\n    return (\r\n      <div className=\"posts-list\">\r\n        <CreatePost />\r\n        {posts.map((post) => (\r\n          <Post post={post} key={post._id} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nPostsList.propTypes = {\r\n  posts: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default PostsList;\r\n","//---- ACTION CREATORS\r\n\r\nimport {\r\n  LOGIN_START,\r\n  LOGIN_FAILED,\r\n  LOGIN_SUCCESS,\r\n  AUTHENTICATE_USER,\r\n  LOG_OUT,\r\n  SIGNUP_START,\r\n  SIGNUP_SUCCESS,\r\n  SIGNUP_FAILED,\r\n  CLEAR_AUTH_STATE,\r\n  EDIT_USER_FAILED,\r\n  EDIT_USER_SUCCESSFUL,\r\n} from './actionTypes';\r\n\r\nimport { APIUrls } from '../helpers/urls';\r\nimport { getFormBody, getAuthTokenFromLocalStorage } from '../helpers/utils';\r\n\r\nexport function startLogin() {\r\n  return {\r\n    type: LOGIN_START,\r\n  };\r\n}\r\n\r\nexport function loginFailed(errorMessage) {\r\n  return {\r\n    type: LOGIN_FAILED,\r\n    error: errorMessage,\r\n  };\r\n}\r\n\r\nexport function loginSuccess(user) {\r\n  return {\r\n    type: LOGIN_SUCCESS,\r\n    user,\r\n  };\r\n}\r\n\r\nexport function login(email, password) {\r\n  return (dispatch) => {\r\n    dispatch(startLogin());\r\n    const url = APIUrls.login();\r\n    fetch(url, {\r\n      method: 'POST',\r\n      headers: {\r\n        ///---- we use heder body coz our API require this info\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n      },\r\n      body: getFormBody({ email, password }),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log('login data', data);\r\n        if (data.success) {\r\n          //TODO-dispatch acction to save user\r\n          localStorage.setItem('token', data.data.token);\r\n          dispatch(loginSuccess(data.data.user));\r\n          return;\r\n        }\r\n        dispatch(loginFailed(data.message));\r\n      });\r\n  };\r\n}\r\n\r\nexport function authenticateUser(user) {\r\n  return {\r\n    type: AUTHENTICATE_USER,\r\n    user,\r\n  };\r\n}\r\n\r\nexport function logoutUser() {\r\n  return {\r\n    type: LOG_OUT,\r\n  };\r\n}\r\n\r\n//---- signup\r\nexport function signup(email, password, confirmPassword, name) {\r\n  return (dispatch) => {\r\n    const url = APIUrls.signup();\r\n    fetch(url, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n      },\r\n      body: getFormBody({\r\n        email,\r\n        password,\r\n        confirm_password: confirmPassword,\r\n        name,\r\n      }),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data.success) {\r\n          localStorage.setItem('token', data.data.token);\r\n          dispatch(signupSuccessful(data.data.user));\r\n          return;\r\n        }\r\n        dispatch(signupFailed(data.message));\r\n      });\r\n  };\r\n}\r\n\r\nexport function startSignup() {\r\n  return {\r\n    type: SIGNUP_START,\r\n  };\r\n}\r\n\r\nexport function signupSuccessful(user) {\r\n  return {\r\n    type: SIGNUP_SUCCESS,\r\n    user,\r\n  };\r\n}\r\nexport function signupFailed(error) {\r\n  return {\r\n    type: SIGNUP_FAILED,\r\n    error,\r\n  };\r\n}\r\n\r\nexport function clearAuthState() {\r\n  return {\r\n    type: CLEAR_AUTH_STATE,\r\n  };\r\n}\r\n\r\nexport function editUserSuccessful(user) {\r\n  return {\r\n    type: EDIT_USER_SUCCESSFUL,\r\n    user,\r\n  };\r\n}\r\n\r\nexport function editUserFailer(error) {\r\n  return {\r\n    type: EDIT_USER_FAILED,\r\n    error,\r\n  };\r\n}\r\n\r\nexport function editUser(name, password, confirmPassword, userId) {\r\n  return (dispatch) => {\r\n    const url = APIUrls.editProfile();\r\n\r\n    fetch(url, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n        Authorization: `Bearer ${getAuthTokenFromLocalStorage()}`,\r\n      },\r\n      body: getFormBody({\r\n        name,\r\n        password,\r\n        confirm_password: confirmPassword,\r\n        id: userId,\r\n      }),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log('Updated Profile data', data);\r\n        if (data.success) {\r\n          dispatch(editUserSuccessful(data.data.user));\r\n\r\n          if (data.data.token) {\r\n            localStorage.setItem('token', data.data.token);\r\n          }\r\n          return;\r\n        }\r\n\r\n        dispatch(editUserFailer(data.message));\r\n      });\r\n  };\r\n}\r\n","import { FETCH_SEARCH_RESULTS_SUCCESS } from './actionTypes';\r\nimport { APIUrls } from '../helpers/urls';\r\nimport { getAuthTokenFromLocalStorage } from '../helpers/utils';\r\n\r\nexport function searchUsers(searchText) {\r\n  return (dispatch) => {\r\n    const url = APIUrls.userSearch(searchText);\r\n\r\n    fetch(url, {\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n        Authorization: `Bearer ${getAuthTokenFromLocalStorage()}`,\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log('SEARCH DATA:', data);\r\n        if (data.success) {\r\n          dispatch(searchResultsSuccess(data.data.users));\r\n        } else {\r\n          dispatch(searchResultsSuccess([]));\r\n        }\r\n      });\r\n  };\r\n}\r\nexport function searchResultsSuccess(users) {\r\n  return {\r\n    type: FETCH_SEARCH_RESULTS_SUCCESS,\r\n    users,\r\n  };\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { logoutUser } from '../action/auth';\r\nimport { searchUsers } from '../action/search';\r\n\r\nclass Navbar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      text: '',\r\n    };\r\n  }\r\n  logOut = () => {\r\n    localStorage.removeItem('token');\r\n    this.props.dispatch(logoutUser());\r\n  };\r\n\r\n  //---- method to  save search text to state and dispatch action\r\n  handleSearch = (e) => {\r\n    const searchText = e.target.value;\r\n    this.setState({\r\n      text: searchText,\r\n    });\r\n    this.props.dispatch(searchUsers(searchText));\r\n    this.setState({\r\n      text: searchText,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { auth, results } = this.props;\r\n    const { text } = this.state;\r\n    return (\r\n      <nav className=\"nav\">\r\n        <div className=\"left-div\">\r\n          <Link to=\"/\">\r\n            <img\r\n              src=\"https://ninjasfiles.s3.amazonaws.com/0000000000003454.png\"\r\n              alt=\"logo\"\r\n            />\r\n          </Link>\r\n        </div>\r\n        <div className=\"search-container\">\r\n          <img\r\n            className=\"search-icon\"\r\n            src=\"https://image.flaticon.com/icons/svg/483/483356.svg\"\r\n            alt=\"search-icon\"\r\n          />\r\n          <input placeholder=\"Search\" onChange={this.handleSearch} />\r\n\r\n          {text.length > 0 && results.length == 0 && (\r\n            <div className=\"search-results\">\r\n              <ul>\r\n                <li className=\"search-results-row loader\"></li>\r\n              </ul>\r\n            </div>\r\n          )}\r\n\r\n          {results.length > 0 && (\r\n            <div className=\"search-results\">\r\n              <ul>\r\n                {results.map((user) => (\r\n                  <li className=\"search-results-row\" key={user._id}>\r\n                    <Link to={`/user/${user._id}`}>\r\n                      <img\r\n                        src=\"https://image.flaticon.com/icons/svg/2154/2154651.svg\"\r\n                        alt=\"user-dp\"\r\n                      />\r\n                      <span>{user.name}</span>\r\n                    </Link>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div className=\"right-nav\">\r\n          {auth.isLoggedin && (\r\n            <div className=\"user\">\r\n              <Link to=\"/settings\">\r\n                <img\r\n                  src=\"https://image.flaticon.com/icons/svg/2154/2154651.svg\"\r\n                  alt=\"user-dp\"\r\n                  id=\"user-dp\"\r\n                />\r\n              </Link>\r\n              <span>{auth.user.name}</span>\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"nav-links\">\r\n            <ul>\r\n              {!auth.isLoggedin && (\r\n                <li>\r\n                  <Link to=\"/login\">Log in</Link>\r\n                </li>\r\n              )}\r\n\r\n              {auth.isLoggedin && <li onClick={this.logOut}>Log out</li>}\r\n\r\n              {!auth.isLoggedin && (\r\n                <li>\r\n                  <Link to=\"/signup\">Register</Link>\r\n                </li>\r\n              )}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    auth: state.auth,\r\n    results: state.search.results,\r\n  };\r\n}\r\nexport default connect(mapStateToProps)(Navbar);\r\n","import React, { Component } from 'react';\r\nimport { PostsList, FriendsList, Chat } from './';\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    const { posts, friends, isLoggedin } = this.props;\r\n    return (\r\n      <div className=\"home\">\r\n        <PostsList posts={posts} />\r\n        {isLoggedin && <FriendsList friends={friends} />}\r\n        {isLoggedin && <Chat />}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nexport default function Page404() {\r\n  return (\r\n    <div>\r\n      <h1>404: Page Not Found</h1>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { login, clearAuthState } from '../action/auth';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    //this.emailInputRef = React.createRef();\r\n    //this.passwordInputRef = React.createRef();\r\n\r\n    this.state = {\r\n      email: '',\r\n      password: '',\r\n    };\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.dispatch(clearAuthState());\r\n  }\r\n\r\n  handleEmailChange = (e) => {\r\n    //console.log(e.target.value);\r\n    this.setState({\r\n      email: e.target.value,\r\n    });\r\n  };\r\n\r\n  handlePasswordChange = (e) => {\r\n    this.setState({\r\n      password: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log('state', this.state);\r\n    const { email, password } = this.state;\r\n\r\n    if (email && password) {\r\n      this.props.dispatch(login(email, password));\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { error, inProgress, isLoggedin } = this.props.auth;\r\n    const { from } = this.props.location.state || { from: { pathname: '/' } };\r\n\r\n    if (isLoggedin) {\r\n      return <Redirect to={from} />;\r\n    }\r\n    return (\r\n      <form className=\"login-form\">\r\n        <span className=\"login-signup-header\">Login</span>\r\n        {error && <div className=\"alert error-dailog\">{error}</div>}\r\n        <div className=\"field\">\r\n          <input\r\n            type=\"email\"\r\n            placeholder=\"Email\"\r\n            required\r\n            //ref={this.emailInputRef}\r\n            onChange={this.handleEmailChange}\r\n            value={this.state.email}\r\n          />\r\n        </div>\r\n        <div className=\"field\">\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n            required\r\n            //ref={this.passwordInputRef}\r\n            onChange={this.handlePasswordChange}\r\n            value={this.state.password}\r\n          />\r\n        </div>\r\n        <div className=\"field\">\r\n          {inProgress ? (\r\n            <button onClick={this.handleFormSubmit} disabled={inProgress}>\r\n              Logging in...\r\n            </button>\r\n          ) : (\r\n            <button onClick={this.handleFormSubmit} disabled={inProgress}>\r\n              Log In\r\n            </button>\r\n          )}\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    auth: state.auth,\r\n  };\r\n}\r\nexport default connect(mapStateToProps)(Login);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { startSignup, signup, clearAuthState } from '../action/auth';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass Signup extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      email: '',\r\n      password: '',\r\n      name: '',\r\n      confirmPassword: '',\r\n    };\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.dispatch(clearAuthState());\r\n  }\r\n\r\n  handleInputChange = (field, value) => {\r\n    this.setState({\r\n      [field]: value,\r\n    });\r\n  };\r\n\r\n  onFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { email, password, confirmPassword, name } = this.state;\r\n\r\n    if (email && password && confirmPassword && name) {\r\n      this.props.dispatch(startSignup());\r\n      this.props.dispatch(signup(email, password, confirmPassword, name));\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { inProgress, error, isLoggedin } = this.props.auth;\r\n    if (isLoggedin) {\r\n      return <Redirect to=\"/\" />;\r\n    }\r\n    return (\r\n      <div>\r\n        <form className=\"login-form\">\r\n          <span className=\"login-signup-header\">SignUp</span>\r\n          {error && <div className=\"alert error-dailog\">{error}</div>}\r\n          <div className=\"field\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Name\"\r\n              required\r\n              onChange={(e) => this.handleInputChange('name', e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"field\">\r\n            <input\r\n              type=\"email\"\r\n              placeholder=\"Email\"\r\n              required\r\n              onChange={(e) => this.handleInputChange('email', e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"field\">\r\n            <input\r\n              type=\"password\"\r\n              placeholder=\"Password\"\r\n              required\r\n              onChange={(e) =>\r\n                this.handleInputChange('password', e.target.value)\r\n              }\r\n            />\r\n          </div>\r\n          <div className=\"field\">\r\n            <input\r\n              type=\"password\"\r\n              placeholder=\"Confirm Password\"\r\n              required\r\n              onChange={(e) =>\r\n                this.handleInputChange('confirmPassword', e.target.value)\r\n              }\r\n            />\r\n          </div>\r\n          <div className=\"field\">\r\n            <button onClick={this.onFormSubmit} disabled={inProgress}>\r\n              Signup\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ auth }) => ({\r\n  auth,\r\n});\r\nexport default connect(mapStateToProps)(Signup);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { editUser, clearAuthState } from '../action/auth';\r\n\r\nclass Settings extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: props.auth.user.name,\r\n      password: '',\r\n      confirmPassword: '',\r\n      editMode: false,\r\n    };\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.dispatch(clearAuthState());\r\n  }\r\n\r\n  handleChange = (fieldName, val) => {\r\n    this.setState({\r\n      [fieldName]: val,\r\n    });\r\n  };\r\n\r\n  handleSave = () => {\r\n    const { password, confirmPassword, name } = this.state;\r\n    const { user } = this.props.auth;\r\n\r\n    //TODO : check pass and confrm pass match or not\r\n\r\n    this.props.dispatch(editUser(name, password, confirmPassword, user._id));\r\n  };\r\n\r\n  render() {\r\n    const { user, error } = this.props.auth;\r\n    const { editMode } = this.state;\r\n    return (\r\n      <div className=\"settings\">\r\n        <div className=\"img-container\">\r\n          <img\r\n            src=\"https://image.flaticon.com/icons/svg/2154/2154651.svg\"\r\n            alt=\"user-dp\"\r\n            id=\"user-dp\"\r\n          />\r\n        </div>\r\n\r\n        {error && <div className=\"alert error-dailog\">{error}</div>}\r\n        {error === false && (\r\n          <div className=\"alert success-dailog\">Successfully Updated.. </div>\r\n        )}\r\n        <div className=\"field\">\r\n          <div className=\"field-label\">Email</div>\r\n          <div className=\"field-value\">{user.email}</div>\r\n        </div>\r\n\r\n        <div className=\"field\">\r\n          <div className=\"field-label\">Name</div>\r\n          {editMode ? (\r\n            <input\r\n              type=\"text\"\r\n              onChange={(e) => this.handleChange('name', e.target.value)}\r\n              value={this.state.name}\r\n            />\r\n          ) : (\r\n            <div className=\"field-value\">{user.name}</div>\r\n          )}\r\n        </div>\r\n\r\n        {editMode && (\r\n          <div className=\"field\">\r\n            <div className=\"field-label\">New password</div>\r\n\r\n            <input\r\n              type=\"password\"\r\n              onChange={(e) => this.handleChange('password', e.target.value)}\r\n              value={this.state.password}\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        {editMode && (\r\n          <div className=\"field\">\r\n            <div className=\"field-label\">Confirm password</div>\r\n\r\n            <input\r\n              type=\"password\"\r\n              onChange={(e) =>\r\n                this.handleChange('confirmPassword', e.target.value)\r\n              }\r\n              value={this.state.confirmPassword}\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"btn-grp\">\r\n          {editMode ? (\r\n            <button className=\"button save-btn\" onClick={this.handleSave}>\r\n              Save\r\n            </button>\r\n          ) : (\r\n            <button\r\n              className=\"button edit-btn\"\r\n              onClick={() => this.handleChange('editMode', true)}\r\n            >\r\n              Edit Profile\r\n            </button>\r\n          )}\r\n\r\n          {editMode && (\r\n            <div\r\n              className=\"go-back\"\r\n              onClick={() => this.handleChange('editMode', false)}\r\n            >\r\n              Go back\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps({ auth }) {\r\n  return {\r\n    auth,\r\n  };\r\n}\r\nexport default connect(mapStateToProps)(Settings);\r\n","import {\r\n  USER_PROFILE_SUCCESS,\r\n  USER_PROFILE_FAILURE,\r\n  FETCH_USER_PROFILE,\r\n} from './actionTypes';\r\nimport { APIUrls } from '../helpers/urls';\r\nimport { getAuthTokenFromLocalStorage } from '../helpers/utils';\r\n\r\nexport function startUserProfileFetch() {\r\n  return {\r\n    type: FETCH_USER_PROFILE,\r\n  };\r\n}\r\n\r\nexport function userProfileSuccess(user) {\r\n  return {\r\n    type: USER_PROFILE_SUCCESS,\r\n    user,\r\n  };\r\n}\r\n\r\nexport function userProfileFailes(error) {\r\n  return {\r\n    type: USER_PROFILE_FAILURE,\r\n    error,\r\n  };\r\n}\r\n\r\nexport function fetchUserProfile(userId) {\r\n  return (dispatch) => {\r\n    dispatch(startUserProfileFetch());\r\n\r\n    const url = APIUrls.userProfile(userId);\r\n    fetch(url, {\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n        Authorization: `Bearer ${getAuthTokenFromLocalStorage()}`,\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        //toDo data success & failure handle\r\n        dispatch(userProfileSuccess(data.data.user));\r\n      });\r\n  };\r\n}\r\n","import { APIUrls } from '../helpers/urls';\r\nimport { getAuthTokenFromLocalStorage } from '../helpers/utils';\r\nimport {\r\n  FETCH_FRIENDS_SUCCESS,\r\n  ADD_FRIEND,\r\n  REMOVE_FRIEND,\r\n} from './actionTypes';\r\n\r\nexport function fetchUserFriends(userId) {\r\n  return (dispatch) => {\r\n    const url = APIUrls.userFriends();\r\n    fetch(url, {\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n        Authorization: `Bearer ${getAuthTokenFromLocalStorage()}`,\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log('Friends Data:', data);\r\n        dispatch(fetchFriendsSuccess(data.data.friends));\r\n      });\r\n  };\r\n}\r\n\r\nexport function fetchFriendsSuccess(friends) {\r\n  return {\r\n    type: FETCH_FRIENDS_SUCCESS,\r\n    friends,\r\n  };\r\n}\r\n\r\nexport function addFriend(friend) {\r\n  return {\r\n    type: ADD_FRIEND,\r\n    friend,\r\n  };\r\n}\r\n\r\nexport function removeFriend(userId) {\r\n  return {\r\n    type: REMOVE_FRIEND,\r\n    userId,\r\n  };\r\n}\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchUserProfile } from '../action/profile';\r\nimport { APIUrls } from '../helpers/urls';\r\nimport { getAuthTokenFromLocalStorage } from '../helpers/utils';\r\nimport { addFriend, removeFriend } from '../action/friends';\r\n\r\nclass UserProfile extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      success: null,\r\n      error: null,\r\n      successMessage: null,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { match } = this.props;\r\n\r\n    //--- here userId id the id of the user whose profile we visit\r\n    if (match.params.userId) {\r\n      this.props.dispatch(fetchUserProfile(match.params.userId));\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    //---- rename params to prevParams/currParams\r\n    const {\r\n      match: { params: prevParams },\r\n    } = prevProps;\r\n\r\n    const {\r\n      match: { params: currentParams },\r\n    } = this.props;\r\n\r\n    if (\r\n      prevProps &&\r\n      currentParams &&\r\n      prevParams.userId !== currentParams.userId\r\n    ) {\r\n      this.props.dispatch(fetchUserProfile(currentParams.userId));\r\n    }\r\n  }\r\n\r\n  //---- method to check if user is already a fried or not (to show add/remove button)\r\n  checkIfUserIsAFriend = () => {\r\n    console.log('this.props(userProfile)', this.props);\r\n    const { match, friends } = this.props;\r\n    const userId = match.params.userId;\r\n\r\n    const index = friends.map((friend) => friend.to_user._id).indexOf(userId);\r\n\r\n    if (index !== -1) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  //---- method to add user as friend\r\n  handleAddFriendClick = async () => {\r\n    const userId = this.props.match.params.userId;\r\n    const url = APIUrls.addFriend(userId);\r\n\r\n    const options = {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n        Authorization: `Bearer ${getAuthTokenFromLocalStorage()}`,\r\n      },\r\n    };\r\n\r\n    const response = await fetch(url, options);\r\n    const data = await response.json();\r\n\r\n    if (data) {\r\n      this.setState({\r\n        success: true,\r\n        successMessage: 'Added friend successfully!',\r\n      });\r\n\r\n      this.props.dispatch(addFriend(data.data.friendship));\r\n    } else {\r\n      this.setState({\r\n        success: null,\r\n        error: data.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  //---- method to unFriend user\r\n  handleRemoveFriendClick = async () => {\r\n    const { match } = this.props;\r\n    const url = APIUrls.removeFriend(match.params.userId);\r\n\r\n    const options = {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n        Authorization: `Bearer ${getAuthTokenFromLocalStorage()}`,\r\n      },\r\n    };\r\n\r\n    const response = await fetch(url, options);\r\n    const data = await response.json();\r\n    //console.log('await data', data);\r\n\r\n    if (data.success) {\r\n      this.setState({\r\n        success: true,\r\n        successMessage: 'Removed friends successfully!',\r\n      });\r\n      this.props.dispatch(removeFriend(match.params.userId));\r\n    } else {\r\n      this.setState({\r\n        success: null,\r\n        error: data.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      match: { params },\r\n      profile,\r\n    } = this.props;\r\n\r\n    console.log('this.props', params);\r\n    const user = profile.user;\r\n\r\n    if (profile.inProgress) {\r\n      return <div className=\"loader\"></div>;\r\n    }\r\n\r\n    const isUserAFriend = this.checkIfUserIsAFriend();\r\n\r\n    const { success, error } = this.state;\r\n    return (\r\n      <div className=\"settings\">\r\n        <div className=\"img-container\">\r\n          <img\r\n            src=\"https://image.flaticon.com/icons/svg/2154/2154651.svg\"\r\n            alt=\"user-dp\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"field\">\r\n          <div className=\"field-label\">Name</div>\r\n          <div className=\"field-value\">{user.name}</div>\r\n        </div>\r\n\r\n        <div className=\"field\">\r\n          <div className=\"field-label\">Email</div>\r\n          <div className=\"field-value\">{user.email}</div>\r\n        </div>\r\n\r\n        <div className=\"btn-grp\">\r\n          {!isUserAFriend ? (\r\n            <button\r\n              className=\"button save-btn\"\r\n              onClick={this.handleAddFriendClick}\r\n            >\r\n              Add Friend\r\n            </button>\r\n          ) : (\r\n            <button\r\n              className=\"button save-btn\"\r\n              onClick={this.handleRemoveFriendClick}\r\n            >\r\n              UnFriend\r\n            </button>\r\n          )}\r\n\r\n          {success && (\r\n            <div className=\"alert success-dailog\">\r\n              Friend added successfully\r\n            </div>\r\n          )}\r\n          {error && <div className=\"alert error-dailog\">{error}</div>}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps({ profile, friends }) {\r\n  return {\r\n    profile,\r\n    friends,\r\n  };\r\n}\r\nexport default connect(mapStateToProps)(UserProfile);\r\n","import React from 'react';\r\nimport { FriendsListItem } from './';\r\n\r\nconst FriendsList = (props) => {\r\n  return (\r\n    <div className=\"friends-list\">\r\n      <div className=\"header\">Friends</div>\r\n\r\n      {props.friends && props.friends.length === 0 && (\r\n        <div className=\"no-friends\">No friends found!</div>\r\n      )}\r\n\r\n      {props.friends &&\r\n        props.friends.map((friend) => (\r\n          <FriendsListItem friend={friend.to_user} key={friend._id} />\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FriendsList;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction FriendsListItem(props) {\r\n  return (\r\n    <div>\r\n      <Link className=\"friends-item\" to={`user/${props.friend._id}`}>\r\n        <div className=\"friends-img\">\r\n          <img\r\n            src=\"https://image.flaticon.com/icons/svg/2154/2154651.svg\"\r\n            alt=\"user-pic\"\r\n          />\r\n        </div>\r\n        <div className=\"friends-name\">{props.friend.name}</div>\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FriendsListItem;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createPost } from '../action/posts';\r\n\r\nclass CreatePost extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      content: '',\r\n    };\r\n  }\r\n\r\n  //---- method to add post on click\r\n  handleOnClick = () => {\r\n    this.props.dispatch(createPost(this.state.content));\r\n\r\n    //--- creae post input\r\n    this.setState({\r\n      content: '',\r\n    });\r\n  };\r\n\r\n  //---- method to keep adding the content of post in state\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      content: e.target.value,\r\n    });\r\n  };\r\n\r\n  //---- render start\r\n  render() {\r\n    const { User } = this.props;\r\n    //console.log('NAME:', User);\r\n    return (\r\n      <div className=\"create-post\">\r\n        <textarea\r\n          placeholder={`What's on your mind, ${User}?`}\r\n          className=\"add-post\"\r\n          value={this.state.content}\r\n          onChange={this.handleChange}\r\n        />\r\n\r\n        <div>\r\n          <button id=\"add-post-btn\" onClick={this.handleOnClick}>\r\n            Add Post\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStoreToProps({ auth }) {\r\n  return {\r\n    User: auth.user.name,\r\n  };\r\n}\r\n//--- here we just need dispatch\r\n//-- if we not make a function(mapStateToProps) it will automatically pass dispatch action\r\nexport default connect(mapStoreToProps)(CreatePost);\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { Comment } from './';\r\nimport { createComment, addLikeToStore } from '../action/posts';\r\n\r\nclass Post extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      comment: '',\r\n      showComments: false,\r\n    };\r\n  }\r\n\r\n  //---- method to dispatch an action on presing enter after typing comment\r\n  handleAddComment = (e) => {\r\n    const { comment } = this.state;\r\n    const { post } = this.props;\r\n\r\n    if (e.key === 'Enter') {\r\n      this.props.dispatch(createComment(comment, post._id));\r\n\r\n      // clear comment\r\n      this.setState({\r\n        comment: '',\r\n      });\r\n    }\r\n  };\r\n\r\n  //---- method to keep adding input from input arear and store it to state\r\n  handleOnCommentChange = (e) => {\r\n    this.setState({\r\n      comment: e.target.value,\r\n    });\r\n  };\r\n\r\n  //---- method to dispatch action on liking a post\r\n  handlePostLike = () => {\r\n    const { post, user } = this.props;\r\n\r\n    this.props.dispatch(addLikeToStore(post._id, 'Post', user._id));\r\n  };\r\n\r\n  //---- method to toggle comment display\r\n  hadleShowComment = () => {\r\n    var comment = this.state.showComments;\r\n\r\n    this.setState({\r\n      showComments: !comment,\r\n    });\r\n  };\r\n\r\n  //---- method to display post date\r\n  handleSetDate = (postDate) => {\r\n    //---- storing curr date\r\n    var today = new Date();\r\n    var currMonth = today.getMonth() + 1;\r\n    var currDate = today.getDate();\r\n\r\n    //console.log('CurrDate:', currMonth, currDate);\r\n    //---- storing post date\r\n    //var year = postDate.slice(0, 4);\r\n    var month = postDate.slice(5, 7);\r\n    var date = postDate.slice(8, 10);\r\n    var hour = postDate.slice(11, 13);\r\n    var minute = postDate.slice(14, 16);\r\n\r\n    if (month.slice(0, 1) === '0') {\r\n      month = month.slice(1, 2);\r\n    }\r\n    if (date.slice(0, 1) === '0') {\r\n      date = date.slice(1, 2);\r\n    }\r\n    //console.log('Date:', month, date);\r\n    //console.log('Time:', hour, minute);\r\n\r\n    if (currDate.toString() === date && currMonth.toString() === month) {\r\n      let finalDate = 'Today at ' + hour + ':' + minute;\r\n      return finalDate;\r\n    } else {\r\n      var months = [\r\n        'January',\r\n        'February',\r\n        'March',\r\n        'April',\r\n        'May',\r\n        'June',\r\n        'July',\r\n        'August',\r\n        'September',\r\n        'October',\r\n        'November',\r\n        'December',\r\n      ];\r\n      let finalDate =\r\n        months[month - 1] + ' ' + date + ' at ' + hour + ':' + minute;\r\n      return finalDate;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { post, user } = this.props;\r\n    const { comment, showComments } = this.state;\r\n\r\n    const isPostLikedByUser = post.likes.includes(user._id);\r\n    return (\r\n      <div className=\"post-wrapper\" key={post._id}>\r\n        <div className=\"post-header\">\r\n          <div className=\"post-avatar\">\r\n            <Link\r\n              to={\r\n                user._id === post.user._id\r\n                  ? '/settings'\r\n                  : `/user/${post.user._id}`\r\n              }\r\n            >\r\n              <img\r\n                src=\"https://image.flaticon.com/icons/svg/2154/2154651.svg\"\r\n                alt=\"user-pic\"\r\n              />\r\n            </Link>\r\n            <div>\r\n              <span className=\"post-author\">{post.user.name}</span>\r\n              <span className=\"post-time\">\r\n                {this.handleSetDate(post.createdAt)}\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <div className=\"post-content\">{post.content}</div>\r\n\r\n          <div className=\"post-actions\">\r\n            <button className=\"post-like no-btn\" onClick={this.handlePostLike}>\r\n              {isPostLikedByUser ? (\r\n                <img\r\n                  src=\"https://image.flaticon.com/icons/svg/1076/1076984.svg\"\r\n                  alt=\"like post\"\r\n                />\r\n              ) : (\r\n                <img\r\n                  src=\"https://image.flaticon.com/icons/svg/1077/1077035.svg\"\r\n                  alt=\"likes-icon\"\r\n                />\r\n              )}\r\n              <span> {post.likes.length}</span>\r\n            </button>\r\n\r\n            <div className=\"post-comments-icon\" onClick={this.hadleShowComment}>\r\n              <img\r\n                src=\"https://image.flaticon.com/icons/svg/1380/1380338.svg\"\r\n                alt=\"comments-icon\"\r\n              />\r\n              <span>{post.comments.length}</span>\r\n            </div>\r\n          </div>\r\n          <div className=\"post-comment-box\">\r\n            <input\r\n              placeholder=\"Start typing a comment...\"\r\n              onChange={this.handleOnCommentChange}\r\n              onKeyPress={this.handleAddComment}\r\n              value={comment}\r\n            />\r\n          </div>\r\n\r\n          {showComments && (\r\n            <div className=\"post-comments-list\">\r\n              {post.comments.map((comment) => (\r\n                <Comment\r\n                  comment={comment}\r\n                  key={comment._id}\r\n                  postId={post._id}\r\n                />\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nPost.propTypes = {\r\n  post: PropTypes.object.isRequired,\r\n};\r\n\r\nfunction mapStateToProps({ auth }) {\r\n  return {\r\n    user: auth.user,\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Post);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addLikeToStore } from '../action/posts';\r\n\r\nclass Comment extends Component {\r\n  //---- method to dispatch action on liking a comment\r\n  handleCommentLike = () => {\r\n    const { comment, user } = this.props;\r\n    this.props.dispatch(\r\n      addLikeToStore(comment._id, 'Comment', user._id, comment.post)\r\n    );\r\n  };\r\n\r\n  //---- method to display comment date\r\n  handleSetDate = (commentDate) => {\r\n    //---- storing curr date\r\n    var today = new Date();\r\n    var currMonth = today.getMonth() + 1;\r\n    var currDate = today.getDate();\r\n\r\n    //console.log('CurrDate:', currMonth, currDate);\r\n    //---- storing post date\r\n    //var year = postDate.slice(0, 4);\r\n    var month = commentDate.slice(5, 7);\r\n    var date = commentDate.slice(8, 10);\r\n    var hour = commentDate.slice(11, 13);\r\n    var minute = commentDate.slice(14, 16);\r\n\r\n    if (month.slice(0, 1) === '0') {\r\n      month = month.slice(1, 2);\r\n    }\r\n    if (date.slice(0, 1) === '0') {\r\n      date = date.slice(1, 2);\r\n    }\r\n    //console.log('Date:', month, date);\r\n    //console.log('Time:', hour, minute);\r\n\r\n    if (currDate.toString() === date && currMonth.toString() === month) {\r\n      let finalDate = 'Today at ' + hour + ':' + minute;\r\n      return finalDate;\r\n    } else {\r\n      var months = [\r\n        'January',\r\n        'February',\r\n        'March',\r\n        'April',\r\n        'May',\r\n        'June',\r\n        'July',\r\n        'August',\r\n        'September',\r\n        'October',\r\n        'November',\r\n        'December',\r\n      ];\r\n      let finalDate =\r\n        months[month - 1] + ' ' + date + ' at ' + hour + ':' + minute;\r\n      return finalDate;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { user } = this.props;\r\n    const { comment } = this.props;\r\n\r\n    const isCommentLikedByUser = comment.likes.includes(user._id);\r\n    return (\r\n      <div className=\"post-comment-item\">\r\n        <div className=\"post-comment-header\">\r\n          <span className=\"post-comment-author\">{comment.user.name}</span>\r\n          <span className=\"post-comment-time\">\r\n            {this.handleSetDate(comment.createdAt)}\r\n          </span>\r\n          <span className=\"post-comment-likes\">\r\n            <button\r\n              className=\"comment-like no-btn\"\r\n              onClick={this.handleCommentLike}\r\n            >\r\n              {isCommentLikedByUser ? (\r\n                <img\r\n                  src=\"https://image.flaticon.com/icons/svg/1076/1076984.svg\"\r\n                  alt=\"like post\"\r\n                />\r\n              ) : (\r\n                <img\r\n                  src=\"https://image.flaticon.com/icons/svg/1077/1077035.svg\"\r\n                  alt=\"likes-icon\"\r\n                />\r\n              )}\r\n              <span>{comment.likes.length}</span>\r\n            </button>\r\n          </span>\r\n        </div>\r\n\r\n        <div className=\"post-comment-content\">{comment.content}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps({ auth }) {\r\n  return {\r\n    user: auth.user,\r\n  };\r\n}\r\nexport default connect(mapStateToProps)(Comment);\r\n","import React, { Component } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { connect } from 'react-redux';\r\nimport '../chat.css';\r\n\r\nclass Chat extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      messages: [], //--- message format {content: 'some message', self: true}\r\n      typedMessage: '',\r\n      showChat: false,\r\n    };\r\n    this.socket = io.connect('http://54.237.158.65:5000');\r\n    this.userEmail = props.user.email;\r\n    //console.log('PROPSSSS', props);\r\n\r\n    if (this.userEmail) {\r\n      this.setUpConnection();\r\n    }\r\n  }\r\n\r\n  //---- setting up connection with socket\r\n  setUpConnection = () => {\r\n    //---- first store this property\r\n    const socketConnection = this.socket;\r\n    const self = this;\r\n\r\n    this.socket.on('connect', function () {\r\n      console.log('CONNECTION ESTABLISHED');\r\n\r\n      //--- emit use to create an ACTION\r\n      socketConnection.emit('join_room', {\r\n        user_email: this.userEmail,\r\n        chatroom: 'codeial',\r\n      });\r\n\r\n      socketConnection.on('user_joined', function (data) {\r\n        console.log('NEW USER JOINED', data);\r\n      });\r\n    });\r\n\r\n    this.socket.on('receive_message', function (data) {\r\n      //---- add messgae to state\r\n      const { messages } = self.state;\r\n      const messageObject = {};\r\n      messageObject.content = data.message;\r\n\r\n      //---- settig self to aling the message properly\r\n      if (data.user_email === self.userEmail) {\r\n        messageObject.self = true;\r\n      }\r\n\r\n      //---- saving all msg to state\r\n      self.setState({\r\n        messages: [...messages, messageObject],\r\n        typedMessage: '',\r\n      });\r\n    });\r\n  };\r\n\r\n  //---- method to add typed message to state\r\n  handleInputChange = (e) => {\r\n    this.setState({\r\n      typedMessage: e.target.value,\r\n    });\r\n  };\r\n\r\n  //---- handle submit message\r\n  handleSubmit = () => {\r\n    const { typedMessage } = this.state;\r\n\r\n    if (typedMessage && this.userEmail) {\r\n      this.socket.emit('send_message', {\r\n        message: typedMessage,\r\n        user_email: this.userEmail,\r\n        chatroom: 'codeial',\r\n      });\r\n    }\r\n  };\r\n\r\n  handlecatbox = () => {\r\n    //console.log('chat1:', this.state.showChat);\r\n    var chat = this.state.showChat;\r\n\r\n    this.setState({\r\n      showChat: !chat,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { typedMessage, messages, showChat } = this.state;\r\n    console.log('chat:', this.state.showChat);\r\n    return showChat ? (\r\n      <div className=\"chat-container\">\r\n        <div className=\"chat-header\">\r\n          Chat\r\n          <img\r\n            // src=\"https://www.iconsdb.com/icons/preview/white/minus-5-xxl.png\"\r\n            src=\"https://image.flaticon.com/icons/svg/659/659892.svg\"\r\n            alt=\"\"\r\n            height={20}\r\n            onClick={this.handlecatbox}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"chat-messages\">\r\n          {messages.map((message) => (\r\n            <div\r\n              className={\r\n                message.self\r\n                  ? 'chat-bubble self-chat'\r\n                  : 'chat-bubble other-chat'\r\n              }\r\n            >\r\n              {message.content}\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        <div className=\"chat-footer\">\r\n          <input\r\n            type=\"text\"\r\n            value={typedMessage}\r\n            onChange={this.handleInputChange}\r\n          />\r\n          <button onClick={this.handleSubmit}>Submit</button>\r\n        </div>\r\n      </div>\r\n    ) : (\r\n      <div className=\"chat-container\">\r\n        <div className=\"chat-header collapse\">\r\n          Chat\r\n          <img\r\n            // src=\"https://www.iconsdb.com/icons/preview/white/minus-5-xxl.png\"\r\n            src=\"https://image.flaticon.com/icons/svg/992/992651.svg\"\r\n            alt=\"\"\r\n            height={20}\r\n            onClick={this.handlecatbox}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps({ auth }) {\r\n  return {\r\n    user: auth.user,\r\n  };\r\n}\r\nexport default connect(mapStateToProps)(Chat);\r\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect,\n} from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { fetchPosts } from '../action/posts';\nimport {\n  Home,\n  NavBar,\n  Page404,\n  LogIn,\n  SignUp,\n  Settings,\n  UserProfile,\n} from './';\nimport * as jwtDecode from 'jwt-decode';\nimport { authenticateUser } from '../action/auth';\nimport { getAuthTokenFromLocalStorage } from '../helpers/utils';\nimport { fetchUserFriends } from '../action/friends';\n\n// const LogOut = () => <div>LogOut</div>;\n// const userProfile = () => <div>User</div>;\n\nconst PrivateRoute = (privateRoutProps) => {\n  const { isLoggedin, path, component: Component } = privateRoutProps;\n\n  return (\n    <Route\n      path={path}\n      render={(props) => {\n        return isLoggedin ? (\n          <Component {...props} />\n        ) : (\n          <Redirect\n            to={{\n              pathname: '/login',\n              state: {\n                from: props.location,\n              },\n            }}\n          />\n        );\n      }}\n    />\n  );\n};\nclass App extends React.Component {\n  componentDidMount() {\n    this.props.dispatch(fetchPosts());\n\n    const token = getAuthTokenFromLocalStorage();\n\n    if (token) {\n      const user = jwtDecode(token);\n\n      //console.log('user', user);\n      this.props.dispatch(\n        authenticateUser({\n          email: user.email,\n          _id: user._id,\n          name: user.name,\n        })\n      );\n\n      this.props.dispatch(fetchUserFriends());\n    }\n  }\n\n  render() {\n    //console.log('PROPS', this.props);\n    const { posts, auth, friends } = this.props;\n    return (\n      <Router>\n        <div>\n          <NavBar />\n\n          <Switch>\n            <Route\n              exact\n              path=\"/\"\n              render={(props) => {\n                return (\n                  <Home\n                    {...props}\n                    posts={posts}\n                    friends={friends}\n                    isLoggedin={auth.isLoggedin}\n                  />\n                );\n              }}\n            />\n            <Route path=\"/login\" component={LogIn} />\n            <Route path=\"/signup\" component={SignUp} />\n            <PrivateRoute\n              path=\"/settings\"\n              component={Settings}\n              isLoggedin={auth.isLoggedin}\n            />\n            <PrivateRoute\n              path=\"/user/:userId\"\n              component={UserProfile}\n              isLoggedin={auth.isLoggedin}\n            />\n            <Route component={Page404} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nfunction mapStoreToProps(state) {\n  return {\n    posts: state.posts,\n    auth: state.auth,\n    friends: state.friends,\n  };\n}\n\nApp.propTypes = {\n  posts: PropTypes.array.isRequired,\n};\n\nexport default connect(mapStoreToProps)(App);\n","import {\r\n  LOGIN_START,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAILED,\r\n  AUTHENTICATE_USER,\r\n  LOG_OUT,\r\n  SIGNUP_START,\r\n  SIGNUP_FAILED,\r\n  SIGNUP_SUCCESS,\r\n  CLEAR_AUTH_STATE,\r\n  EDIT_USER_SUCCESSFUL,\r\n  EDIT_USER_FAILED,\r\n} from '../action/actionTypes';\r\n\r\nconst initialAuthState = {\r\n  user: {},\r\n  error: null,\r\n  isLoggedin: false,\r\n  inProgress: false,\r\n};\r\n\r\nexport default function auth(state = initialAuthState, action) {\r\n  switch (action.type) {\r\n    case CLEAR_AUTH_STATE:\r\n      return {\r\n        ...state,\r\n        error: null,\r\n      };\r\n    case LOGIN_START:\r\n    case SIGNUP_START:\r\n      return {\r\n        ...state,\r\n        inProgress: true,\r\n      };\r\n    case LOGIN_SUCCESS:\r\n    case SIGNUP_SUCCESS:\r\n      return {\r\n        ...state,\r\n        user: action.user,\r\n        isLoggedin: true,\r\n        inProgress: false,\r\n        error: null,\r\n      };\r\n    case LOGIN_FAILED:\r\n    case SIGNUP_FAILED:\r\n      return {\r\n        ...state,\r\n        inProgress: false,\r\n        error: action.error,\r\n      };\r\n    case AUTHENTICATE_USER:\r\n      return {\r\n        ...state,\r\n        user: action.user,\r\n        isLoggedin: true,\r\n      };\r\n    case LOG_OUT:\r\n      return {\r\n        ...state,\r\n        user: {},\r\n        isLoggedin: false,\r\n      };\r\n    case EDIT_USER_SUCCESSFUL:\r\n      return {\r\n        ...state,\r\n        user: action.user,\r\n        error: false,\r\n      };\r\n    case EDIT_USER_FAILED:\r\n      return {\r\n        ...state,\r\n        error: action.error,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  USER_PROFILE_SUCCESS,\r\n  USER_PROFILE_FAILURE,\r\n  FETCH_USER_PROFILE,\r\n} from '../action/actionTypes';\r\n\r\nconst initialProfileState = {\r\n  user: {},\r\n  error: null,\r\n  success: null,\r\n  inProgress: false,\r\n};\r\nexport default function profile(state = initialProfileState, action) {\r\n  switch (action.type) {\r\n    case USER_PROFILE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        success: true,\r\n        user: action.user,\r\n        inProgress: false,\r\n      };\r\n    case USER_PROFILE_FAILURE:\r\n      return {\r\n        ...state,\r\n        error: action.error,\r\n        inProgress: false,\r\n      };\r\n    case FETCH_USER_PROFILE:\r\n      return {\r\n        ...state,\r\n        inProgress: true,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  FETCH_FRIENDS_SUCCESS,\r\n  ADD_FRIEND,\r\n  REMOVE_FRIEND,\r\n} from '../action/actionTypes';\r\n\r\nconst defaultProfileState = [];\r\n\r\nexport default function friends(state = defaultProfileState, action) {\r\n  switch (action.type) {\r\n    case FETCH_FRIENDS_SUCCESS:\r\n      return [...action.friends];\r\n    case ADD_FRIEND:\r\n      return state.concat(action.friend);\r\n    case REMOVE_FRIEND:\r\n      const newArr = state.filter(\r\n        (friend) => friend.to_user._id !== action.userId\r\n      );\r\n      return newArr;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { FETCH_SEARCH_RESULTS_SUCCESS } from '../action/actionTypes';\r\n\r\nconst initialSearchState = {\r\n  results: [],\r\n};\r\n\r\nexport default function search(state = initialSearchState, action) {\r\n  switch (action.type) {\r\n    case FETCH_SEARCH_RESULTS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        results: action.users,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","//---- combine reducer is user  for combine all the reducer into one and send it to other\r\n\r\nimport { combineReducers } from 'redux';\r\nimport posts from './posts';\r\nimport auth from './auth';\r\nimport profile from './profile';\r\nimport friends from './friends';\r\nimport search from './search';\r\n\r\nexport default combineReducers({\r\n  posts,\r\n  auth,\r\n  profile,\r\n  friends,\r\n  search,\r\n});\r\n","import {\r\n  UPDATE_POSTS,\r\n  ADD_POST,\r\n  ADD_COMMENT,\r\n  UPDATE_POST_LIKE,\r\n  UPDATE_COMMENT_LIKE,\r\n} from '../action/actionTypes';\r\n\r\n//---- for differnt action we perform different task\r\nexport default function posts(state = [], action) {\r\n  switch (action.type) {\r\n    case UPDATE_POSTS:\r\n      return action.posts;\r\n\r\n    case ADD_POST:\r\n      return [action.post, ...state];\r\n\r\n    case ADD_COMMENT:\r\n      const newPosts = state.map((post) => {\r\n        if (post._id === action.postId) {\r\n          return {\r\n            ...post,\r\n            comments: [action.comment, ...post.comments],\r\n          };\r\n        }\r\n\r\n        return post;\r\n      });\r\n      return newPosts;\r\n\r\n    case UPDATE_POST_LIKE:\r\n      const updatedPosts = state.map((post) => {\r\n        if (post._id === action.postId) {\r\n          return {\r\n            ...post,\r\n            likes: [...post.likes, action.userId],\r\n          };\r\n        }\r\n\r\n        return post;\r\n      });\r\n      return updatedPosts;\r\n\r\n    case UPDATE_COMMENT_LIKE:\r\n      const updatedPost = state.map((post) => {\r\n        if (post._id === action.postId) {\r\n          const updateComment = post.comments.map((comment) => {\r\n            if (comment._id === action.commentId) {\r\n              return {\r\n                ...comment,\r\n                likes: [...comment.likes, action.userId],\r\n              };\r\n            }\r\n            return comment;\r\n          });\r\n          console.log('updateComment:', updateComment);\r\n          return { ...post, comments: [...updateComment] };\r\n        }\r\n        return post;\r\n      });\r\n      console.log('updatedPost:', updatedPost);\r\n      return updatedPost;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './components/App';\nimport { configureStore } from './store'; //--- at automatically get index.js file in store\n\nconst store = configureStore();\n//console.log('store:', store.getState());\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n","import { applyMiddleware, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\nimport reducer from '../reducer';\r\n\r\nlet store;\r\n\r\nexport function configureStore() {\r\n  //--- store can have only one reducer so we combineAll Reducer and import it here as reducer\r\n  store = createStore(reducer, applyMiddleware(thunk, logger));\r\n\r\n  return store;\r\n}\r\n"],"sourceRoot":""}